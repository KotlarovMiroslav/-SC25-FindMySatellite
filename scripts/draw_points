# points_3d_view.py
# Show only the given (x,y,z) points in a 3D scatter.

import numpy as np
import matplotlib.pyplot as plt

def set_axes_equal(ax, X, Y, Z):
    X = np.asarray(X); Y = np.asarray(Y); Z = np.asarray(Z)
    xmid = (X.min() + X.max()) / 2.0
    ymid = (Y.min() + Y.max()) / 2.0
    zmid = (Z.min() + Z.max()) / 2.0
    R = max(np.ptp(X)/2.0, np.ptp(Y)/2.0, np.ptp(Z)/2.0, 1.0)  # safe if data is flat
    ax.set_xlim(xmid - R, xmid + R)
    ax.set_ylim(ymid - R, ymid + R)
    ax.set_zlim(zmid - R, zmid + R)
    if hasattr(ax, "set_box_aspect"):
        ax.set_box_aspect((1, 1, 1))

def show_points_3d(points, title="3D Points", annotate=True):
    """
    points: iterable of (x, y, z)
    annotate: label points P1, P2, ... near each marker
    """
    P = np.asarray(points, dtype=float)
    if P.ndim != 2 or P.shape[1] != 3 or len(P) == 0:
        raise ValueError("Provide points as an array-like of shape (N, 3).")

    fig = plt.figure(figsize=(8, 6))
    ax = fig.add_subplot(111, projection="3d")

    ax.scatter(P[:,0], P[:,1], P[:,2], s=60)

    if annotate:
        for i, (xi, yi, zi) in enumerate(P, start=1):
            ax.text(xi, yi, zi, f"P{i}", fontsize=9)

    ax.set_xlabel("X"); ax.set_ylabel("Y"); ax.set_zlabel("Z")
    ax.set_title(title)
    set_axes_equal(ax, P[:,0], P[:,1], P[:,2])
    plt.show()

# -------- Demo with 7 points on a circle (radius 7000, z=0) --------
if __name__ == "__main__":
    points = [
        ( 7000.000,     0.000,    0.000),  # 0°
        ( 6062.178,  3500.000,    0.000),  # 30°
        ( 3500.000,  6062.178,    0.000),  # 60°
        (    0.000,  7000.000,    0.000),  # 90°
        (-3500.000,  6062.178,    0.000),  # 120°
        (-6062.178,  3500.000,    0.000),  # 150°
        (-7000.000,     0.000,    0.000),  # 180°
    ]
    show_points_3d(points, title="Your 7 Points (no orbit)", annotate=True)
